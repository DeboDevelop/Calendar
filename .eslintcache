[{"/home/tukai/Projects/Calendar/src/index.js":"1","/home/tukai/Projects/Calendar/src/Components/common/Tile.js":"2","/home/tukai/Projects/Calendar/src/Components/pages/Details.js":"3","/home/tukai/Projects/Calendar/src/Components/common/Box.js":"4","/home/tukai/Projects/Calendar/src/Components/common/DisabledTile.js":"5","/home/tukai/Projects/Calendar/src/Components/pages/Home.js":"6","/home/tukai/Projects/Calendar/src/Components/common/Calendar.js":"7","/home/tukai/Projects/Calendar/src/App.js":"8"},{"size":229,"mtime":1611818374872,"results":"9","hashOfConfig":"10"},{"size":3313,"mtime":1612434804898,"results":"11","hashOfConfig":"10"},{"size":3842,"mtime":1612429888015,"results":"12","hashOfConfig":"10"},{"size":5518,"mtime":1612365113147,"results":"13","hashOfConfig":"10"},{"size":3050,"mtime":1612434846906,"results":"14","hashOfConfig":"10"},{"size":6244,"mtime":1612457612119,"results":"15","hashOfConfig":"10"},{"size":3085,"mtime":1612450386230,"results":"16","hashOfConfig":"10"},{"size":551,"mtime":1612435333267,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1hslkzj",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"/home/tukai/Projects/Calendar/src/index.js",[],["38","39"],"/home/tukai/Projects/Calendar/src/Components/common/Tile.js",[],"/home/tukai/Projects/Calendar/src/Components/pages/Details.js",[],"/home/tukai/Projects/Calendar/src/Components/common/Box.js",["40"],"import React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport filledStar from \"../../assets/icons/filledStar.svg\";\nimport unfilledStar from \"../../assets/icons/unfilledStar.svg\";\nimport \"./Box.css\";\nlet data = require(\"../../assets/dummy/data.json\");\n\nfunction Box({ text, index, month, year }) {\n    let history = useHistory();\n    const [size, setSize] = useState({ width: 0, height: 0 });\n    const [post, setPost] = useState(null);\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize({ width: window.innerWidth, height: window.innerHeight });\n        }\n        window.addEventListener(\"resize\", updateSize);\n        updateSize();\n        return () => window.removeEventListener(\"resize\", updateSize);\n    }, []);\n    useEffect(() => {\n        if (text >= 1 && text <= 31) {\n            let decide = Math.floor(Math.random() * 5);\n            if (decide === 0) {\n                decide = Math.floor(Math.random() * 4);\n                setPost(data.responseobjects[0].posts[decide]);\n            }\n        }\n    }, []);\n    const getImg = () => {\n        let cellWidth = (size.width - (2 / 100) * size.width) / 7;\n        return {\n            height: 4 * (cellWidth / 3),\n            width: cellWidth,\n            overflow: \"hidden\",\n            textAlign: \"center\",\n        };\n    };\n    const getStyle = () => {\n        let styleObj = {\n            width: (size.width - (2 / 100) * size.width) / 7,\n            backgroundColor: \"#FCFEFF\",\n            border: \"solid\",\n            borderWidth: 0.3,\n            borderColor: \"#000000\",\n        };\n        if (\n            text === \"Sun\" ||\n            text === \"Mon\" ||\n            text === \"Tue\" ||\n            text === \"Wed\" ||\n            text === \"Thu\" ||\n            text === \"Fri\" ||\n            text === \"Sat\"\n        ) {\n            styleObj[\"height\"] = 30;\n        }\n        if (index === 0) {\n            styleObj[\"backgroundColor\"] = \"#ECEAEF\";\n        }\n        return styleObj;\n    };\n    const gettxt = () => {\n        let styleObj = {\n            color: \"#000000\",\n        };\n        if (text === \"Sun\") {\n            styleObj[\"color\"] = \"#818181\";\n        }\n        return styleObj;\n    };\n    const getCurr = () => {\n        let styleObj = {\n            backgroundColor: \"transparent\",\n        };\n        const currDay = new Date().getDate();\n        const currMonth = new Date().getMonth();\n        const currYear = new Date().getFullYear();\n        if (currDay === text && currMonth === month && currYear === year) {\n            styleObj[\"backgroundColor\"] = \"#ff0000\";\n        }\n        return styleObj;\n    };\n    const getDetail = () => {\n        if (text >= 1 && text <= 31) {\n            history.push(`/details?day=${text}&month=${month}&year=${year}`);\n        }\n    };\n    return (\n        <div style={getStyle()} onClick={getDetail}>\n            {text >= 1 && text <= 31 ? (\n                <>\n                    <div className=\"first-row\">\n                        <div>\n                            {post !== null ? (\n                                <div className=\"legends-div star-div\">\n                                    {Array(post.rating)\n                                        .fill(0)\n                                        .map(() => (\n                                            <img className=\"star\" src={filledStar} alt=\"filledStar\" />\n                                        ))}\n                                    {Array(5 - post.rating)\n                                        .fill(0)\n                                        .map(() => (\n                                            <img className=\"star\" src={unfilledStar} alt=\"unfilledStar\" />\n                                        ))}\n                                </div>\n                            ) : (\n                                <div></div>\n                            )}\n                        </div>\n                        <div className=\"circle-with-text\" style={getCurr()}>\n                            <span style={gettxt()}>{text}</span>\n                        </div>\n                    </div>\n                </>\n            ) : (\n                <span style={gettxt()}>{text}</span>\n            )}\n\n            {post !== null ? (\n                <>\n                    <div style={getImg()}>\n                        <img className=\"post-img\" src={post.images[0].imageurl} alt=\"user's post\"></img>\n                    </div>\n                    <div className=\"legends-div\">\n                        {post.typeofday.map(item => {\n                            if (item === \"deep conditioning\") return <div className=\"circle-with-text dc\">DC</div>;\n                            else if (item === \"protein treatment\") return <div className=\"circle-with-text pr\">Pr</div>;\n                            else if (item === \"hair cut\") return <div className=\"circle-with-text cu\">Cu</div>;\n                            else if (item === \"hair color\") return <div className=\"circle-with-text hc\">HC</div>;\n                            else if (item === \"clarifying\") return <div className=\"circle-with-text c\">C</div>;\n                            else return <span></span>;\n                        })}\n                    </div>\n                </>\n            ) : (\n                <>\n                    <div style={getImg()}></div>\n                    <div className=\"legends-div\"></div>\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default Box;\n",["41","42"],"/home/tukai/Projects/Calendar/src/Components/common/DisabledTile.js",[],["43","44"],"/home/tukai/Projects/Calendar/src/Components/pages/Home.js",[],"/home/tukai/Projects/Calendar/src/Components/common/Calendar.js",[],"/home/tukai/Projects/Calendar/src/App.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":28,"column":8,"nodeType":"51","endLine":28,"endColumn":10,"suggestions":"52"},{"ruleId":"45","replacedBy":"53"},{"ruleId":"47","replacedBy":"54"},{"ruleId":"45","replacedBy":"55"},{"ruleId":"47","replacedBy":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'text'. Either include it or remove the dependency array.","ArrayExpression",["59"],["57"],["58"],["57"],["58"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [text]",{"range":"62","text":"63"},[1106,1108],"[text]"]